Doc sobre html basico:
https://developer.mozilla.org/pt-BR/docs/Learn/Getting_started_with_the_web/HTML_basics

Para saber todos os rels que existem (estilos de docs) V
https://www.w3schools.com/tags/att_link_rel.asp

Extensões Vs Code:
Live server - pra rodar em tempo real o código que você está codando


GLOSSARIO:
snipet - um pequeno pedaço de código 
emmet - quando você digita html5 e aperta tab e ele completa

DICAS GERAIS

ICONS - Sugestão de biblioteca de Icons: Feather (ou o fontawesome - o triste é que o mais bonitinhos são pagos)
FAVICON - Você pode pegar um png do google e colocar como favicon no link rel="icon", mas também pode pegar um png e converter ele em favicon através de programas
          disponibilizados na internet (com a diferença que o link rel="icon" type="image/x-icon")

HTML:
* o viewport - é ele que diz se o seu site será responsívo ou não (essencial)
* No html não faz diferença usar maiusculo ou minusculo (por padrão usamos sempre minusculo)
* Algumas tags do html, tem semanticas ligadas a SEO, mas isso é especificamente utilizado por dev. de sites institucionais.

CSS:
* Cascate style sheet = Folha em estilo cascata
* Sempre utilize fontes gratuitas (não vai ter b.o. com processo ein?) O google fonts é ótimo pra isso
* Quando importar fontes do googles, sempre escolha fazer pelo import do css, a sintaxe é menor e você incorpora diretamente no css.
* Sempre escolha importar bibliotecas de icons que sejam SVG (vetores), pois eles são menos pesados do que utilizar imagens
* É possível fazer CSS dentro das próprias tags - O nome disso é CSS Inline - É um método não recomendado, por deixar o código sujo e desorganizado
* O código "height: 100%" não funciona, pois o height funciona de forma diferente. O jeito certo de usa-lo está demonstrado abaixo 
	/* Jeito certo 1 */
  	height: 200px;

	/* Jeito certo 2 - viewport height - Para pegar a altura inteira da tela visualizada como no exemplo: height: 100% */
  	/* height: 100vh; */
* É possível definir min e max de width e height...
* para centralizar: margin: auto
* background (cor de fundo) color (cor de fonte)
* border (largura, estilo e cor) - é possível ver todas as opções no site da w3c
* border-radius: (é possível definir canto a canto qual será arredondado)

* UNIDADES DE MEDIDA NO CSS
	* absolutas
		cm, mm, q, in, pt, pc, px (dessas usamos praticamente só o px)
	* relativas
		* Pra fontes: ex, ch, mais usadas: em, rem
		EM - É sempre relativo a classe pai o valor colocado nele, sempre irá multiplicar o valor do pai
			(ele não é muito utilizado, justamente por se perder o controle muito fácil dele)
		REM - É SEMPRE RELATIVO AO BODY
		* % de viewport: vw, vh (viewport é o pedaço da tela que está aparecendo)

* DISPLAY
	* Se dividem basicamente em 2: block e inline
	* Block - sempre oculpa toda a largura possível da tela
		Elementos que são por padrão: div, p, h1, h2, ...
		(então um elemento nunca fica do lado do outro)
		É possível manipular o width e o height 
	* Inline - Usam somente o espaço necessário e não precisam começar em uma nova linha
		(elemento aparece proximo do outro na mesma linha)
		Elementos padrão: span, img, a
		Não é possível controlar o width e o height
		Desconsidera margin e padding top e bottom (até consegue colocar coisas na horizontal... na vertical ele quebra)
	* inline-block
		Muito utilizado pra criar menu
		Ele deixa elementos um do lado do outro
		deixando manipular width e etc.
 * POSITION
	
	*static - 
		(por default todos os elementos vem static)
		Ele renderiza os elementos na ordem que aparecem no documento
		Não é possível mudar top e left
	* Relative - 
		Pode ser posicionado relativamente a sua posição original
		é possivel manipular top e left
		elemento sai fora do fluxo
		ela se sobresai da static ficando em primeiro plano
	* Absolute - 
		Elemento é posicionado relativamente no ultimo elemento antecessor que não for static
		é possível manipular top e left
		elemento sai fora do fluxo
		necessario indicar o elemento ao qual a posição é relativa
		(a diferença dele pro relative... é que o relative é baseado na posição original dele
		já o absolute é possível dizer hierarquicamente quem é seu pai)
	* Fixed - 
		Elemento é posicionado relativamente a janela do navegador
		é possível manipular top e left
		usado para menus
	* Sticky - 
		elemento é posicionado baseado na posição do scroll do usuário
		dependendo da posição do scroll o elemento se gruda em algum lugar e vira fixed
		É possível manipular top e left

* Z-index


JS
* Quando você for importar uma biblioteca JS é importante chamar ela lá na header
  E pra ela funcionar precisa ser chamada lá antes do fechamendo do body, por causa da renderização